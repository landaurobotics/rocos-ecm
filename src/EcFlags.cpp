#include <regex>
#include "EcFlags.h"

DEFINE_string(config, "/etc/rocos-ecm/ecat_config.yaml", "Path to ecat_config file in YAML format.");

DEFINE_string(eni, "/etc/rocos-ecm/eni.xml", "Path to ENI file in XML format.");

DEFINE_int32(t, 0, "Time in msec, 0 = forever, Running duration in msec. When the time expires, the application exits completely.");

DEFINE_int32(b, 1000, "Bus cycle time in μsec. Specifies the bus cycle time. Defaults to 1000μs (1ms).");

DEFINE_int32(v, 0, "Verbosity level: 0=off (default), 1..n=more messages. The verbosity level specifies how much console output messages will be generated by the demo application. A high verbosity level leads to more messages.");

DEFINE_int32(a, 0, "0 = first CPU, 1 = second, .... The CPU affinity specifies which CPU the demo application ought to use.");

DEFINE_bool(perf, false, "Enable max. and average time measurement in μs for all EtherCAT jobs (e.g. ProcessAllRxFrames).");

DEFINE_int32(auxclk, 0, "Clock period in μs, must greater than 10, otherwise auxclk is disable. (if supported by Operating System).");

DEFINE_int32(sp, 6000, "If platform has support for IP Sockets, this commandline option enables the Remote API Server to be started with the EcMasterDemo. The Remote API Server is going to listen on TCP Port 6000 (or port parameter if given) and is available for connecting Remote API Clients. This option is included for attaching the EC-Lyser Application to the running master.");

DEFINE_string(log, "", "Use given file name prefix for log files.");



DEFINE_string(i8254x, "1 1", "<instance>: Device instance 1=first, 2=second; <mode>: Mode 0 = Interrupt mode, 1= Polling mode");
static bool Validate8254x(const char* flagname, const std::string& value) {
    std::regex ws_re("\\s+"); // whitespace
    std::vector<std::string> v(std::sregex_token_iterator(value.begin(), value.end(), ws_re, -1), std::sregex_token_iterator());
    if(v.size() != 2) {
        printf("Invalid value for --%s: %s\n", flagname, value.c_str());
        return false;
    }
    int instance = std::stoi(v[0]);
    int mode = std::stoi(v[1]);
    if((instance < 1) || (instance > 2) || (mode < 0) || (mode > 1)) {
        printf("Invalid value for --%s: %s\n", flagname, value.c_str());
        return false;
    }
    else
        return true;
}
DEFINE_validator(i8254x, &Validate8254x);